image: docker:latest

variables:
  # container version
  DEBIAN_CROSS_TOOLCHAINS_MAJOR: "1"
  DEBIAN_CROSS_TOOLCHAINS_MINOR: "0"
  DEBIAN_CROSS_TOOLCHAINS_PATCH: "0"

  DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR: "1"
  DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR: "0"
  DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH: "0"
 
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

services:
  - name: docker:dind

before_script:
  - docker info

stages:
  - build-base
  - build-ssh
  - deploy-major
  - deploy-minor
  - deploy-patch
  - deploy-patch-date

# Docker image builds
#
# Build the Docker images  specificd in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - if test -n "${BASE_NAME}"; then docker pull ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} && docker tag ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} torizon/${BASE_NAME}:buster ; fi || exit 1
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - docker pull ${CI_REGISTRY}/rd/torizon-core-containers/debian-docker-images/${IMAGE_NAME}:buster-latest || true
    - export DATE=$(date +%Y%m%d)
    - docker build --build-arg ARCH_ARG=${ARCH_ARG}
      --build-arg CROSS_COMPILE_ARG=${CROSS_COMPILE_ARG}
      --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKER_NO_CACHE:+--no-cache}
       --label container.name=${IMAGE_NAME} 
       --label container.version=${MAJOR}.${MINOR}.${PATCH}-${DATE} 
       --label git.branch=${CI_COMMIT_BRANCH}  
       --label git.hash=${CI_COMMIT_SHA} 
       --label pipeline.id=${CI_PIPELINE_ID} 
      -f ${DOCKERFILE_FOLDER}Dockerfile
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKERFILE_FOLDER}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

docker-build-armhf-toolchain:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"  
  variables:
    ARCH_ARG: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf
    IMAGE_NAME: debian-cross-toolchain-armhf
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-armhf-toolchain-ssh:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"  
  variables:
    ARCH_ARG: armhf
    BASE_NAME: debian-cross-toolchain-armhf
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
    DOCKERFILE_FOLDER: "ssh/"
  stage: build-ssh

docker-build-arm64-toolchain:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"  
  variables:
    ARCH_ARG: arm64
    CROSS_COMPILE_ARG: aarch64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-arm64
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-arm64-toolchain-ssh:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"  
  variables:
    ARCH_ARG: arm64
    BASE_NAME: debian-cross-toolchain-arm64
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
    DOCKERFILE_FOLDER: "ssh/"
  stage: build-ssh

# Enable experimental features in Docker client (experimental feature are needed for manifest)
.do_docker_experimental: &do_docker_experimental
    - mkdir -p $HOME/.docker
    - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
    - docker version

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_PW is properly set in the project
# specific Gitlab CI settings.
.docker-deploy-major:
  when: manual
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  - docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}

docker-deploy-armhf-toolchain-major:
  extends: .docker-deploy-major
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf
  stage: deploy-major

docker-deploy-armhf-toolchain-ssh-major:
  extends: .docker-deploy-major
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
  stage: deploy-major

docker-deploy-arm64-toolchain-major:
  extends: .docker-deploy-major
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64
  stage: deploy-major

docker-deploy-arm64-toolchain-ssh-major:
  extends: .docker-deploy-major
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"  
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
  stage: deploy-major

.docker-deploy-minor:
  when: manual
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  - docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}

docker-deploy-armhf-toolchain-minor:
  extends: .docker-deploy-minor
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf
  stage: deploy-minor

docker-deploy-armhf-toolchain-ssh-minor:
  extends: .docker-deploy-minor
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
  stage: deploy-minor

docker-deploy-arm64-toolchain-minor:
  extends: .docker-deploy-minor
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64
  stage: deploy-minor

docker-deploy-arm64-toolchain-ssh-minor:
  extends: .docker-deploy-minor
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"  
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
  stage: deploy-minor

.docker-deploy-patch:
  when: manual
  script:
  - *do_docker_experimental
  - docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH} > /dev/null && true; RESULT=$?
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  - (if [ ${RESULT} == 1 ] ; then docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME} ; else echo Image with this tag already exists. ; fi)

docker-deploy-armhf-toolchain-patch:
  extends: .docker-deploy-patch
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf
  stage: deploy-patch

docker-deploy-armhf-toolchain-ssh-patch:
  extends: .docker-deploy-patch
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
  stage: deploy-patch

docker-deploy-arm64-toolchain-patch:
  extends: .docker-deploy-patch
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64
  stage: deploy-patch

docker-deploy-arm64-toolchain-ssh-patch:
  extends: .docker-deploy-patch
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"  
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
  stage: deploy-patch

.docker-deploy-patch-date:
  when: manual
  script:
  - *do_docker_experimental
  - export DATE=$(date +%Y%m%d)
  - docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE} > /dev/null && true; RESULT=$?
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
  - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${MAJOR}.${MINOR}.${PATCH}-${DATE}
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  - (if [ ${RESULT} == 1 ] ; then docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME} ; else echo Image with this tag already exists. ; fi)

docker-deploy-armhf-toolchain-patch-date:
  extends: .docker-deploy-patch-date
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf
  stage: deploy-patch-date

docker-deploy-armhf-toolchain-ssh-patch-date:
  extends: .docker-deploy-patch-date
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
  stage: deploy-patch-date

docker-deploy-arm64-toolchain-patch-date:
  extends: .docker-deploy-patch-date
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64
  stage: deploy-patch-date

docker-deploy-arm64-toolchain-ssh-patch-date:
  extends: .docker-deploy-patch-date
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"  
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
  stage: deploy-patch-date